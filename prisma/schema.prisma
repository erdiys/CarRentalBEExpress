generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cars {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar
  manufacturer  String?   @db.VarChar
  licenseNumber String?   @db.VarChar
  seat          Int?
  baggage       Int?
  transmission  String?   @db.VarChar
  year          String?   @db.VarChar
  description   String?
  isDriver      Boolean?  @default(false)
  isAvailable   Boolean?  @default(true)
  img           String?
  price         Int?
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  createdBy      String?   @db.VarChar
  updatedAt      DateTime? @updatedAt
  updatedBy      String?   @db.VarChar
  orders        orders[]

  // @@index([name], map: "cars_name_idx")
}

model orders {
  id             Int       @id @default(autoincrement())
  orderNumber    String?   @unique @db.VarChar
  car_id         Int
  user_id        Int
  payment_id     Int?
  status         String?   @db.VarChar
  paymentReceipt String?
  total          Float?
  isDriver       Boolean?
  isExpired      Boolean?  @default(false)
  startTime      String?   @db.VarChar
  finishTime     String?   @db.VarChar
  createdAt      DateTime? @default(now()) @db.Timestamp(6)
  createdBy       String?   @db.VarChar
  updatedAt       DateTime? @updatedAt
  updatedBy       String?   @db.VarChar
  cars           cars      @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments       payments? @relation(fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payments {
  id            Int       @id @default(autoincrement())
  type          String?   @db.VarChar
  company       String?   @db.VarChar
  accountNumber String?   @db.VarChar
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  createdBy      String?   @db.VarChar
  updatedAt      DateTime? @updatedAt
  updatedBy      String?   @db.VarChar
  orders        orders[]
}

model users {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar
  email         String    @unique @db.VarChar(30)
  password      String    @db.VarChar
  address       String?   @db.VarChar
  gender        String?   @db.VarChar
  phoneNumber   String?   @unique @db.VarChar
  driverLicense String?
  avatar        String?
  birthdate     String?   @db.VarChar
  role_id       Int
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  createdBy      String?   @db.VarChar
  updatedAt      DateTime? @updatedAt
  updatedBy      String?   @db.VarChar
  orders        orders[]
  role          roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model roles {
  id        Int       @id @default(autoincrement())
  role      String    @unique
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  createdBy  String?   @db.VarChar
  updatedAt  DateTime? @updatedAt
  updatedBy  String?   @db.VarChar
  access    access[]
  users     users[]
}

model menus {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  title      String
  icon       String?
  path       String?
  isSubmenu  Boolean   @default(false)
  parent_id  Int?
  permission String[]
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  createdBy   String?   @db.VarChar
  updatedAt   DateTime? @updatedAt
  updatedBy   String?   @db.VarChar
  submenu    menus?    @relation("submenu", fields: [parent_id], references: [id])
  parents    menus[]   @relation("submenu")
  access     access[]
}

model access {
  id        Int       @id @default(autoincrement())
  role_id   Int
  menu_id   Int
  visible   Boolean   @default(true)
  grant     Json
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  createdBy  String?   @db.VarChar
  updatedAt  DateTime? @updatedAt
  updatedBy  String?   @db.VarChar
  role      roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  menu      menus     @relation(fields: [menu_id], references: [id], onDelete: Cascade)
}
